import os
from google.cloud import texttospeech
import pyperclip
import keyboard
import time
import pygame
import io
import tkinter as tk
from tkinter import ttk

power_toggle = 0

# Set up the environment variable for Google Cloud authentication
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "CloudKey.json"

# Initialize the Text-to-Speech client
client = texttospeech.TextToSpeechClient()
pygame.mixer.init()


def test_voice():
    # Test the selected voice with the specified speed
    speed = app.speed_slider.get()
    print(speed)
    text_to_speech("Testing voice", speed, voice_name=app.combo_box.get())


def switch_and_execute():
    try:
        # Switch to the last active window and execute key press handler
        keyboard.send('alt+tab')
        time.sleep(0.5)
        handle_key_press()
    except Exception as e:
        print(f'Error in switch_and_execute: {e}')


class App(tk.Tk):
    def __init__(self):
        super().__init__()

        # Set up the main window
        self.title("TTS")
        self.attributes('-topmost', True)

        # Add the toggle button for enabling/disabling key binding
        self.toggle_button = ttk.Button(self, text="Bind: OFF", command=self.toggle)
        self.toggle_button.grid(row=0, column=0, pady=5, padx=5)

        # Add the combo box for selecting the voice
        self.combo_box = ttk.Combobox(self, values=[
            "en-GB-Wavenet-A",
            "en-GB-Wavenet-B",
            "en-GB-Wavenet-C",
            "en-GB-Wavenet-D",
            "en-GB-Wavenet-E",
            "en-US-Wavenet-A",
            "en-US-Wavenet-B",
            "en-US-Wavenet-C",
            "en-US-Wavenet-D",
            "en-US-Wavenet-E",
            "en-US-Wavenet-F",
            "en-US-Wavenet-G",
            "en-US-Wavenet-H",
            "en-US-Wavenet-I",
            "en-US-Wavenet-J"
        ])
        self.combo_box.state(['readonly'])
        self.combo_box.current(1)
        self.combo_box.grid(row=0, column=1, pady=5, padx=5)

        # Add the test button to test the selected voice
        self.test_button = ttk.Button(self, text="Test", command=test_voice)
        self.test_button.grid(row=0, column=2, pady=5, padx=5)

        # Add the label and combo box for selecting the binding key
        self.binding_label = ttk.Label(self, text="Binding:")
        self.binding_label.grid(row=1, column=0, pady=5, padx=5, sticky='E')
        self.binding_combo_box = ttk.Combobox(self, values=["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9"])
        self.binding_combo_box.current(3)
        self.binding_combo_box.grid(row=1, column=1, pady=5, padx=5, sticky='W')

        # Add the button to trigger the reading of text
        self.switch_button = ttk.Button(self, text="Read Text â™ª", command=switch_and_execute)
        self.switch_button.grid(row=1, column=2, pady=5, padx=5, sticky='W')

        # Add the volume label and slider for setting the volume
        self.volume_label = ttk.Label(self, text="Volume:")
        self.volume_label.grid(row=2, column=0, pady=5, padx=5, sticky='E')
        self.volume_slider = ttk.Scale(self, from_=0, to=100, orient='horizontal', command=self.set_volume)
        self.volume_slider.set(50)
        self.volume_slider.grid(row=2, column=1, columnspan=2, pady=5, padx=5, sticky='EW')

        # Add the speed label, value label, and slider for setting the speaking speed
        self.speed_label = ttk.Label(self, text="Speed:")
        self.speed_label.grid(row=3, column=0, pady=5, padx=5, sticky='E')
        self.speed_value_label = ttk.Label(self, text="1.00")
        self.speed_value_label.grid(row=3, column=2, pady=5, padx=5, sticky='W')
        self.speed_slider = ttk.Scale(self, from_=0.25, to=4, orient='horizontal', command=self.update_speed)
        self.speed_slider.set(1)
        self.speed_slider.grid(row=3, column=1, pady=5, padx=5, sticky='EW')

        self.update_idletasks()
        self.resizable(False, False)

    def update_speed(self, event=None):
        # Update the displayed speed value when the slider is adjusted
        speed = self.speed_slider.get()
        self.speed_value_label.config(text=f"{float(speed):.2f}")

    def toggle(self):
        global power_toggle
        # Toggle the key binding on and off
        if power_toggle == 1:
            self.toggle_button.configure(text="Bind: OFF")
            keyboard.unhook_all_hotkeys()
            power_toggle = 0
        else:
            self.toggle_button.configure(text="Bind: ON")
            power_toggle = 1
            bind_key()

    def set_volume(self, event=None):
        # Set the volume for the audio playback
        volume = self.volume_slider.get()
        pygame.mixer.music.set_volume(float(volume) / 100)


app = App()


def bind_key():
    # Bind the selected key to handle key press event
    keyboard.add_hotkey(app.binding_combo_box.get(), handle_key_press)


def text_to_speech(text, speaking_rate, voice_name="en-GB-Standard-A"):
    try:
        # Prepare the text input for synthesis
        synthesis_input = texttospeech.SynthesisInput(text=text)

        # Configure the voice parameters
        voice = texttospeech.VoiceSelectionParams(
            language_code="en-GB",
            name=voice_name,
            ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL
        )

        # Configure the audio output settings including the speaking rate
        audio_config = texttospeech.AudioConfig(
            audio_encoding=texttospeech.AudioEncoding.MP3,
            speaking_rate=speaking_rate
        )

        # Perform the text-to-speech request
        response = client.synthesize_speech(
            input=synthesis_input, voice=voice, audio_config=audio_config
        )

        # Play the synthesized audio using pygame
        audio_data = response.audio_content
        audio_stream = io.BytesIO(audio_data)
        pygame.mixer.music.load(audio_stream)
        pygame.mixer.music.play()

    except Exception as e:
        print(f'Error in text_to_speech: {e}')


def handle_key_press():
    try:
        # Stop playback if audio is currently playing
        if pygame.mixer.music.get_busy():
            pygame.mixer.music.stop()
            return

        # Clear the clipboard and copy selected text
        pyperclip.copy('')
        text = pyperclip.paste()
        start_time = time.time()

        keyboard.send('ctrl+c')
        text = pyperclip.paste()

        # Convert the copied text to speech
        if isinstance(text, str):
            speed = app.speed_slider.get()
            text_to_speech(text, speed, voice_name=app.combo_box.get())
        else:
            print("Error: Copy contains something other than text data.")
    except Exception as e:
        print(f'Error: {e}')


app.mainloop()
